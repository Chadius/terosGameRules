// Code generated by counterfeiter. DO NOT EDIT.
package powerattackforecastfakes

import (
	"sync"

	"github.com/chadius/terosbattleserver/entity/powerusagescenario"
	"github.com/chadius/terosbattleserver/usecase/powerattackforecast"
	"github.com/chadius/terosbattleserver/usecase/repositories"
)

type FakeCalculationInterface struct {
	AttackStub        func() *powerattackforecast.AttackForecast
	attackMutex       sync.RWMutex
	attackArgsForCall []struct {
	}
	attackReturns struct {
		result1 *powerattackforecast.AttackForecast
	}
	attackReturnsOnCall map[int]struct {
		result1 *powerattackforecast.AttackForecast
	}
	CounterAttackStub        func() *powerattackforecast.AttackForecast
	counterAttackMutex       sync.RWMutex
	counterAttackArgsForCall []struct {
	}
	counterAttackReturns struct {
		result1 *powerattackforecast.AttackForecast
	}
	counterAttackReturnsOnCall map[int]struct {
		result1 *powerattackforecast.AttackForecast
	}
	CounterAttackSetupStub        func() *powerusagescenario.Setup
	counterAttackSetupMutex       sync.RWMutex
	counterAttackSetupArgsForCall []struct {
	}
	counterAttackSetupReturns struct {
		result1 *powerusagescenario.Setup
	}
	counterAttackSetupReturnsOnCall map[int]struct {
		result1 *powerusagescenario.Setup
	}
	HealingForecastStub        func() *powerattackforecast.HealingForecast
	healingForecastMutex       sync.RWMutex
	healingForecastArgsForCall []struct {
	}
	healingForecastReturns struct {
		result1 *powerattackforecast.HealingForecast
	}
	healingForecastReturnsOnCall map[int]struct {
		result1 *powerattackforecast.HealingForecast
	}
	RepositoriesStub        func() *repositories.RepositoryCollection
	repositoriesMutex       sync.RWMutex
	repositoriesArgsForCall []struct {
	}
	repositoriesReturns struct {
		result1 *repositories.RepositoryCollection
	}
	repositoriesReturnsOnCall map[int]struct {
		result1 *repositories.RepositoryCollection
	}
	SetupStub        func() *powerusagescenario.Setup
	setupMutex       sync.RWMutex
	setupArgsForCall []struct {
	}
	setupReturns struct {
		result1 *powerusagescenario.Setup
	}
	setupReturnsOnCall map[int]struct {
		result1 *powerusagescenario.Setup
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCalculationInterface) Attack() *powerattackforecast.AttackForecast {
	fake.attackMutex.Lock()
	ret, specificReturn := fake.attackReturnsOnCall[len(fake.attackArgsForCall)]
	fake.attackArgsForCall = append(fake.attackArgsForCall, struct {
	}{})
	stub := fake.AttackStub
	fakeReturns := fake.attackReturns
	fake.recordInvocation("Attack", []interface{}{})
	fake.attackMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCalculationInterface) AttackCallCount() int {
	fake.attackMutex.RLock()
	defer fake.attackMutex.RUnlock()
	return len(fake.attackArgsForCall)
}

func (fake *FakeCalculationInterface) AttackCalls(stub func() *powerattackforecast.AttackForecast) {
	fake.attackMutex.Lock()
	defer fake.attackMutex.Unlock()
	fake.AttackStub = stub
}

func (fake *FakeCalculationInterface) AttackReturns(result1 *powerattackforecast.AttackForecast) {
	fake.attackMutex.Lock()
	defer fake.attackMutex.Unlock()
	fake.AttackStub = nil
	fake.attackReturns = struct {
		result1 *powerattackforecast.AttackForecast
	}{result1}
}

func (fake *FakeCalculationInterface) AttackReturnsOnCall(i int, result1 *powerattackforecast.AttackForecast) {
	fake.attackMutex.Lock()
	defer fake.attackMutex.Unlock()
	fake.AttackStub = nil
	if fake.attackReturnsOnCall == nil {
		fake.attackReturnsOnCall = make(map[int]struct {
			result1 *powerattackforecast.AttackForecast
		})
	}
	fake.attackReturnsOnCall[i] = struct {
		result1 *powerattackforecast.AttackForecast
	}{result1}
}

func (fake *FakeCalculationInterface) CounterAttack() *powerattackforecast.AttackForecast {
	fake.counterAttackMutex.Lock()
	ret, specificReturn := fake.counterAttackReturnsOnCall[len(fake.counterAttackArgsForCall)]
	fake.counterAttackArgsForCall = append(fake.counterAttackArgsForCall, struct {
	}{})
	stub := fake.CounterAttackStub
	fakeReturns := fake.counterAttackReturns
	fake.recordInvocation("CounterAttack", []interface{}{})
	fake.counterAttackMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCalculationInterface) CounterAttackCallCount() int {
	fake.counterAttackMutex.RLock()
	defer fake.counterAttackMutex.RUnlock()
	return len(fake.counterAttackArgsForCall)
}

func (fake *FakeCalculationInterface) CounterAttackCalls(stub func() *powerattackforecast.AttackForecast) {
	fake.counterAttackMutex.Lock()
	defer fake.counterAttackMutex.Unlock()
	fake.CounterAttackStub = stub
}

func (fake *FakeCalculationInterface) CounterAttackReturns(result1 *powerattackforecast.AttackForecast) {
	fake.counterAttackMutex.Lock()
	defer fake.counterAttackMutex.Unlock()
	fake.CounterAttackStub = nil
	fake.counterAttackReturns = struct {
		result1 *powerattackforecast.AttackForecast
	}{result1}
}

func (fake *FakeCalculationInterface) CounterAttackReturnsOnCall(i int, result1 *powerattackforecast.AttackForecast) {
	fake.counterAttackMutex.Lock()
	defer fake.counterAttackMutex.Unlock()
	fake.CounterAttackStub = nil
	if fake.counterAttackReturnsOnCall == nil {
		fake.counterAttackReturnsOnCall = make(map[int]struct {
			result1 *powerattackforecast.AttackForecast
		})
	}
	fake.counterAttackReturnsOnCall[i] = struct {
		result1 *powerattackforecast.AttackForecast
	}{result1}
}

func (fake *FakeCalculationInterface) CounterAttackSetup() *powerusagescenario.Setup {
	fake.counterAttackSetupMutex.Lock()
	ret, specificReturn := fake.counterAttackSetupReturnsOnCall[len(fake.counterAttackSetupArgsForCall)]
	fake.counterAttackSetupArgsForCall = append(fake.counterAttackSetupArgsForCall, struct {
	}{})
	stub := fake.CounterAttackSetupStub
	fakeReturns := fake.counterAttackSetupReturns
	fake.recordInvocation("CounterAttackSetup", []interface{}{})
	fake.counterAttackSetupMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCalculationInterface) CounterAttackSetupCallCount() int {
	fake.counterAttackSetupMutex.RLock()
	defer fake.counterAttackSetupMutex.RUnlock()
	return len(fake.counterAttackSetupArgsForCall)
}

func (fake *FakeCalculationInterface) CounterAttackSetupCalls(stub func() *powerusagescenario.Setup) {
	fake.counterAttackSetupMutex.Lock()
	defer fake.counterAttackSetupMutex.Unlock()
	fake.CounterAttackSetupStub = stub
}

func (fake *FakeCalculationInterface) CounterAttackSetupReturns(result1 *powerusagescenario.Setup) {
	fake.counterAttackSetupMutex.Lock()
	defer fake.counterAttackSetupMutex.Unlock()
	fake.CounterAttackSetupStub = nil
	fake.counterAttackSetupReturns = struct {
		result1 *powerusagescenario.Setup
	}{result1}
}

func (fake *FakeCalculationInterface) CounterAttackSetupReturnsOnCall(i int, result1 *powerusagescenario.Setup) {
	fake.counterAttackSetupMutex.Lock()
	defer fake.counterAttackSetupMutex.Unlock()
	fake.CounterAttackSetupStub = nil
	if fake.counterAttackSetupReturnsOnCall == nil {
		fake.counterAttackSetupReturnsOnCall = make(map[int]struct {
			result1 *powerusagescenario.Setup
		})
	}
	fake.counterAttackSetupReturnsOnCall[i] = struct {
		result1 *powerusagescenario.Setup
	}{result1}
}

func (fake *FakeCalculationInterface) HealingForecast() *powerattackforecast.HealingForecast {
	fake.healingForecastMutex.Lock()
	ret, specificReturn := fake.healingForecastReturnsOnCall[len(fake.healingForecastArgsForCall)]
	fake.healingForecastArgsForCall = append(fake.healingForecastArgsForCall, struct {
	}{})
	stub := fake.HealingForecastStub
	fakeReturns := fake.healingForecastReturns
	fake.recordInvocation("HealingForecast", []interface{}{})
	fake.healingForecastMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCalculationInterface) HealingForecastCallCount() int {
	fake.healingForecastMutex.RLock()
	defer fake.healingForecastMutex.RUnlock()
	return len(fake.healingForecastArgsForCall)
}

func (fake *FakeCalculationInterface) HealingForecastCalls(stub func() *powerattackforecast.HealingForecast) {
	fake.healingForecastMutex.Lock()
	defer fake.healingForecastMutex.Unlock()
	fake.HealingForecastStub = stub
}

func (fake *FakeCalculationInterface) HealingForecastReturns(result1 *powerattackforecast.HealingForecast) {
	fake.healingForecastMutex.Lock()
	defer fake.healingForecastMutex.Unlock()
	fake.HealingForecastStub = nil
	fake.healingForecastReturns = struct {
		result1 *powerattackforecast.HealingForecast
	}{result1}
}

func (fake *FakeCalculationInterface) HealingForecastReturnsOnCall(i int, result1 *powerattackforecast.HealingForecast) {
	fake.healingForecastMutex.Lock()
	defer fake.healingForecastMutex.Unlock()
	fake.HealingForecastStub = nil
	if fake.healingForecastReturnsOnCall == nil {
		fake.healingForecastReturnsOnCall = make(map[int]struct {
			result1 *powerattackforecast.HealingForecast
		})
	}
	fake.healingForecastReturnsOnCall[i] = struct {
		result1 *powerattackforecast.HealingForecast
	}{result1}
}

func (fake *FakeCalculationInterface) Repositories() *repositories.RepositoryCollection {
	fake.repositoriesMutex.Lock()
	ret, specificReturn := fake.repositoriesReturnsOnCall[len(fake.repositoriesArgsForCall)]
	fake.repositoriesArgsForCall = append(fake.repositoriesArgsForCall, struct {
	}{})
	stub := fake.RepositoriesStub
	fakeReturns := fake.repositoriesReturns
	fake.recordInvocation("Repositories", []interface{}{})
	fake.repositoriesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCalculationInterface) RepositoriesCallCount() int {
	fake.repositoriesMutex.RLock()
	defer fake.repositoriesMutex.RUnlock()
	return len(fake.repositoriesArgsForCall)
}

func (fake *FakeCalculationInterface) RepositoriesCalls(stub func() *repositories.RepositoryCollection) {
	fake.repositoriesMutex.Lock()
	defer fake.repositoriesMutex.Unlock()
	fake.RepositoriesStub = stub
}

func (fake *FakeCalculationInterface) RepositoriesReturns(result1 *repositories.RepositoryCollection) {
	fake.repositoriesMutex.Lock()
	defer fake.repositoriesMutex.Unlock()
	fake.RepositoriesStub = nil
	fake.repositoriesReturns = struct {
		result1 *repositories.RepositoryCollection
	}{result1}
}

func (fake *FakeCalculationInterface) RepositoriesReturnsOnCall(i int, result1 *repositories.RepositoryCollection) {
	fake.repositoriesMutex.Lock()
	defer fake.repositoriesMutex.Unlock()
	fake.RepositoriesStub = nil
	if fake.repositoriesReturnsOnCall == nil {
		fake.repositoriesReturnsOnCall = make(map[int]struct {
			result1 *repositories.RepositoryCollection
		})
	}
	fake.repositoriesReturnsOnCall[i] = struct {
		result1 *repositories.RepositoryCollection
	}{result1}
}

func (fake *FakeCalculationInterface) Setup() *powerusagescenario.Setup {
	fake.setupMutex.Lock()
	ret, specificReturn := fake.setupReturnsOnCall[len(fake.setupArgsForCall)]
	fake.setupArgsForCall = append(fake.setupArgsForCall, struct {
	}{})
	stub := fake.SetupStub
	fakeReturns := fake.setupReturns
	fake.recordInvocation("Setup", []interface{}{})
	fake.setupMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCalculationInterface) SetupCallCount() int {
	fake.setupMutex.RLock()
	defer fake.setupMutex.RUnlock()
	return len(fake.setupArgsForCall)
}

func (fake *FakeCalculationInterface) SetupCalls(stub func() *powerusagescenario.Setup) {
	fake.setupMutex.Lock()
	defer fake.setupMutex.Unlock()
	fake.SetupStub = stub
}

func (fake *FakeCalculationInterface) SetupReturns(result1 *powerusagescenario.Setup) {
	fake.setupMutex.Lock()
	defer fake.setupMutex.Unlock()
	fake.SetupStub = nil
	fake.setupReturns = struct {
		result1 *powerusagescenario.Setup
	}{result1}
}

func (fake *FakeCalculationInterface) SetupReturnsOnCall(i int, result1 *powerusagescenario.Setup) {
	fake.setupMutex.Lock()
	defer fake.setupMutex.Unlock()
	fake.SetupStub = nil
	if fake.setupReturnsOnCall == nil {
		fake.setupReturnsOnCall = make(map[int]struct {
			result1 *powerusagescenario.Setup
		})
	}
	fake.setupReturnsOnCall[i] = struct {
		result1 *powerusagescenario.Setup
	}{result1}
}

func (fake *FakeCalculationInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.attackMutex.RLock()
	defer fake.attackMutex.RUnlock()
	fake.counterAttackMutex.RLock()
	defer fake.counterAttackMutex.RUnlock()
	fake.counterAttackSetupMutex.RLock()
	defer fake.counterAttackSetupMutex.RUnlock()
	fake.healingForecastMutex.RLock()
	defer fake.healingForecastMutex.RUnlock()
	fake.repositoriesMutex.RLock()
	defer fake.repositoriesMutex.RUnlock()
	fake.setupMutex.RLock()
	defer fake.setupMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCalculationInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ powerattackforecast.CalculationInterface = new(FakeCalculationInterface)
