// Code generated by counterfeiter. DO NOT EDIT.
package powerattackforecastfakes

import (
	"sync"

	"github.com/chadius/terosgamerules/usecase/powerattackforecast"
	"github.com/chadius/terosgamerules/usecase/repositories"
)

type FakeForecastInterface struct {
	CalculateForecastStub        func()
	calculateForecastMutex       sync.RWMutex
	calculateForecastArgsForCall []struct {
	}
	ForecastedResultPerTargetStub        func() []powerattackforecast.CalculationInterface
	forecastedResultPerTargetMutex       sync.RWMutex
	forecastedResultPerTargetArgsForCall []struct {
	}
	forecastedResultPerTargetReturns struct {
		result1 []powerattackforecast.CalculationInterface
	}
	forecastedResultPerTargetReturnsOnCall map[int]struct {
		result1 []powerattackforecast.CalculationInterface
	}
	RepositoriesStub        func() *repositories.RepositoryCollection
	repositoriesMutex       sync.RWMutex
	repositoriesArgsForCall []struct {
	}
	repositoriesReturns struct {
		result1 *repositories.RepositoryCollection
	}
	repositoriesReturnsOnCall map[int]struct {
		result1 *repositories.RepositoryCollection
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeForecastInterface) CalculateForecast() {
	fake.calculateForecastMutex.Lock()
	fake.calculateForecastArgsForCall = append(fake.calculateForecastArgsForCall, struct {
	}{})
	stub := fake.CalculateForecastStub
	fake.recordInvocation("CalculateForecast", []interface{}{})
	fake.calculateForecastMutex.Unlock()
	if stub != nil {
		fake.CalculateForecastStub()
	}
}

func (fake *FakeForecastInterface) CalculateForecastCallCount() int {
	fake.calculateForecastMutex.RLock()
	defer fake.calculateForecastMutex.RUnlock()
	return len(fake.calculateForecastArgsForCall)
}

func (fake *FakeForecastInterface) CalculateForecastCalls(stub func()) {
	fake.calculateForecastMutex.Lock()
	defer fake.calculateForecastMutex.Unlock()
	fake.CalculateForecastStub = stub
}

func (fake *FakeForecastInterface) ForecastedResultPerTarget() []powerattackforecast.CalculationInterface {
	fake.forecastedResultPerTargetMutex.Lock()
	ret, specificReturn := fake.forecastedResultPerTargetReturnsOnCall[len(fake.forecastedResultPerTargetArgsForCall)]
	fake.forecastedResultPerTargetArgsForCall = append(fake.forecastedResultPerTargetArgsForCall, struct {
	}{})
	stub := fake.ForecastedResultPerTargetStub
	fakeReturns := fake.forecastedResultPerTargetReturns
	fake.recordInvocation("ForecastedResultPerTarget", []interface{}{})
	fake.forecastedResultPerTargetMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeForecastInterface) ForecastedResultPerTargetCallCount() int {
	fake.forecastedResultPerTargetMutex.RLock()
	defer fake.forecastedResultPerTargetMutex.RUnlock()
	return len(fake.forecastedResultPerTargetArgsForCall)
}

func (fake *FakeForecastInterface) ForecastedResultPerTargetCalls(stub func() []powerattackforecast.CalculationInterface) {
	fake.forecastedResultPerTargetMutex.Lock()
	defer fake.forecastedResultPerTargetMutex.Unlock()
	fake.ForecastedResultPerTargetStub = stub
}

func (fake *FakeForecastInterface) ForecastedResultPerTargetReturns(result1 []powerattackforecast.CalculationInterface) {
	fake.forecastedResultPerTargetMutex.Lock()
	defer fake.forecastedResultPerTargetMutex.Unlock()
	fake.ForecastedResultPerTargetStub = nil
	fake.forecastedResultPerTargetReturns = struct {
		result1 []powerattackforecast.CalculationInterface
	}{result1}
}

func (fake *FakeForecastInterface) ForecastedResultPerTargetReturnsOnCall(i int, result1 []powerattackforecast.CalculationInterface) {
	fake.forecastedResultPerTargetMutex.Lock()
	defer fake.forecastedResultPerTargetMutex.Unlock()
	fake.ForecastedResultPerTargetStub = nil
	if fake.forecastedResultPerTargetReturnsOnCall == nil {
		fake.forecastedResultPerTargetReturnsOnCall = make(map[int]struct {
			result1 []powerattackforecast.CalculationInterface
		})
	}
	fake.forecastedResultPerTargetReturnsOnCall[i] = struct {
		result1 []powerattackforecast.CalculationInterface
	}{result1}
}

func (fake *FakeForecastInterface) Repositories() *repositories.RepositoryCollection {
	fake.repositoriesMutex.Lock()
	ret, specificReturn := fake.repositoriesReturnsOnCall[len(fake.repositoriesArgsForCall)]
	fake.repositoriesArgsForCall = append(fake.repositoriesArgsForCall, struct {
	}{})
	stub := fake.RepositoriesStub
	fakeReturns := fake.repositoriesReturns
	fake.recordInvocation("Repositories", []interface{}{})
	fake.repositoriesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeForecastInterface) RepositoriesCallCount() int {
	fake.repositoriesMutex.RLock()
	defer fake.repositoriesMutex.RUnlock()
	return len(fake.repositoriesArgsForCall)
}

func (fake *FakeForecastInterface) RepositoriesCalls(stub func() *repositories.RepositoryCollection) {
	fake.repositoriesMutex.Lock()
	defer fake.repositoriesMutex.Unlock()
	fake.RepositoriesStub = stub
}

func (fake *FakeForecastInterface) RepositoriesReturns(result1 *repositories.RepositoryCollection) {
	fake.repositoriesMutex.Lock()
	defer fake.repositoriesMutex.Unlock()
	fake.RepositoriesStub = nil
	fake.repositoriesReturns = struct {
		result1 *repositories.RepositoryCollection
	}{result1}
}

func (fake *FakeForecastInterface) RepositoriesReturnsOnCall(i int, result1 *repositories.RepositoryCollection) {
	fake.repositoriesMutex.Lock()
	defer fake.repositoriesMutex.Unlock()
	fake.RepositoriesStub = nil
	if fake.repositoriesReturnsOnCall == nil {
		fake.repositoriesReturnsOnCall = make(map[int]struct {
			result1 *repositories.RepositoryCollection
		})
	}
	fake.repositoriesReturnsOnCall[i] = struct {
		result1 *repositories.RepositoryCollection
	}{result1}
}

func (fake *FakeForecastInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.calculateForecastMutex.RLock()
	defer fake.calculateForecastMutex.RUnlock()
	fake.forecastedResultPerTargetMutex.RLock()
	defer fake.forecastedResultPerTargetMutex.RUnlock()
	fake.repositoriesMutex.RLock()
	defer fake.repositoriesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeForecastInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ powerattackforecast.ForecastInterface = new(FakeForecastInterface)
