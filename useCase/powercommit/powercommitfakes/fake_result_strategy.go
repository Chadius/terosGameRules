// Code generated by counterfeiter. DO NOT EDIT.
package powercommitfakes

import (
	"sync"

	"github.com/chadius/terosgamerules/usecase/powerattackforecast"
	"github.com/chadius/terosgamerules/usecase/powercommit"
	"github.com/chadius/terosgamerules/utility"
)

type FakeResultStrategy struct {
	CommitStub        func()
	commitMutex       sync.RWMutex
	commitArgsForCall []struct {
	}
	DieRollerStub        func() utility.SixSideGenerator
	dieRollerMutex       sync.RWMutex
	dieRollerArgsForCall []struct {
	}
	dieRollerReturns struct {
		result1 utility.SixSideGenerator
	}
	dieRollerReturnsOnCall map[int]struct {
		result1 utility.SixSideGenerator
	}
	ForecastStub        func() *powerattackforecast.Forecast
	forecastMutex       sync.RWMutex
	forecastArgsForCall []struct {
	}
	forecastReturns struct {
		result1 *powerattackforecast.Forecast
	}
	forecastReturnsOnCall map[int]struct {
		result1 *powerattackforecast.Forecast
	}
	ResultPerTargetStub        func() []*powercommit.ResultPerTarget
	resultPerTargetMutex       sync.RWMutex
	resultPerTargetArgsForCall []struct {
	}
	resultPerTargetReturns struct {
		result1 []*powercommit.ResultPerTarget
	}
	resultPerTargetReturnsOnCall map[int]struct {
		result1 []*powercommit.ResultPerTarget
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeResultStrategy) Commit() {
	fake.commitMutex.Lock()
	fake.commitArgsForCall = append(fake.commitArgsForCall, struct {
	}{})
	stub := fake.CommitStub
	fake.recordInvocation("Commit", []interface{}{})
	fake.commitMutex.Unlock()
	if stub != nil {
		fake.CommitStub()
	}
}

func (fake *FakeResultStrategy) CommitCallCount() int {
	fake.commitMutex.RLock()
	defer fake.commitMutex.RUnlock()
	return len(fake.commitArgsForCall)
}

func (fake *FakeResultStrategy) CommitCalls(stub func()) {
	fake.commitMutex.Lock()
	defer fake.commitMutex.Unlock()
	fake.CommitStub = stub
}

func (fake *FakeResultStrategy) DieRoller() utility.SixSideGenerator {
	fake.dieRollerMutex.Lock()
	ret, specificReturn := fake.dieRollerReturnsOnCall[len(fake.dieRollerArgsForCall)]
	fake.dieRollerArgsForCall = append(fake.dieRollerArgsForCall, struct {
	}{})
	stub := fake.DieRollerStub
	fakeReturns := fake.dieRollerReturns
	fake.recordInvocation("DieRoller", []interface{}{})
	fake.dieRollerMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeResultStrategy) DieRollerCallCount() int {
	fake.dieRollerMutex.RLock()
	defer fake.dieRollerMutex.RUnlock()
	return len(fake.dieRollerArgsForCall)
}

func (fake *FakeResultStrategy) DieRollerCalls(stub func() utility.SixSideGenerator) {
	fake.dieRollerMutex.Lock()
	defer fake.dieRollerMutex.Unlock()
	fake.DieRollerStub = stub
}

func (fake *FakeResultStrategy) DieRollerReturns(result1 utility.SixSideGenerator) {
	fake.dieRollerMutex.Lock()
	defer fake.dieRollerMutex.Unlock()
	fake.DieRollerStub = nil
	fake.dieRollerReturns = struct {
		result1 utility.SixSideGenerator
	}{result1}
}

func (fake *FakeResultStrategy) DieRollerReturnsOnCall(i int, result1 utility.SixSideGenerator) {
	fake.dieRollerMutex.Lock()
	defer fake.dieRollerMutex.Unlock()
	fake.DieRollerStub = nil
	if fake.dieRollerReturnsOnCall == nil {
		fake.dieRollerReturnsOnCall = make(map[int]struct {
			result1 utility.SixSideGenerator
		})
	}
	fake.dieRollerReturnsOnCall[i] = struct {
		result1 utility.SixSideGenerator
	}{result1}
}

func (fake *FakeResultStrategy) Forecast() *powerattackforecast.Forecast {
	fake.forecastMutex.Lock()
	ret, specificReturn := fake.forecastReturnsOnCall[len(fake.forecastArgsForCall)]
	fake.forecastArgsForCall = append(fake.forecastArgsForCall, struct {
	}{})
	stub := fake.ForecastStub
	fakeReturns := fake.forecastReturns
	fake.recordInvocation("Forecast", []interface{}{})
	fake.forecastMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeResultStrategy) ForecastCallCount() int {
	fake.forecastMutex.RLock()
	defer fake.forecastMutex.RUnlock()
	return len(fake.forecastArgsForCall)
}

func (fake *FakeResultStrategy) ForecastCalls(stub func() *powerattackforecast.Forecast) {
	fake.forecastMutex.Lock()
	defer fake.forecastMutex.Unlock()
	fake.ForecastStub = stub
}

func (fake *FakeResultStrategy) ForecastReturns(result1 *powerattackforecast.Forecast) {
	fake.forecastMutex.Lock()
	defer fake.forecastMutex.Unlock()
	fake.ForecastStub = nil
	fake.forecastReturns = struct {
		result1 *powerattackforecast.Forecast
	}{result1}
}

func (fake *FakeResultStrategy) ForecastReturnsOnCall(i int, result1 *powerattackforecast.Forecast) {
	fake.forecastMutex.Lock()
	defer fake.forecastMutex.Unlock()
	fake.ForecastStub = nil
	if fake.forecastReturnsOnCall == nil {
		fake.forecastReturnsOnCall = make(map[int]struct {
			result1 *powerattackforecast.Forecast
		})
	}
	fake.forecastReturnsOnCall[i] = struct {
		result1 *powerattackforecast.Forecast
	}{result1}
}

func (fake *FakeResultStrategy) ResultPerTarget() []*powercommit.ResultPerTarget {
	fake.resultPerTargetMutex.Lock()
	ret, specificReturn := fake.resultPerTargetReturnsOnCall[len(fake.resultPerTargetArgsForCall)]
	fake.resultPerTargetArgsForCall = append(fake.resultPerTargetArgsForCall, struct {
	}{})
	stub := fake.ResultPerTargetStub
	fakeReturns := fake.resultPerTargetReturns
	fake.recordInvocation("ResultPerTarget", []interface{}{})
	fake.resultPerTargetMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeResultStrategy) ResultPerTargetCallCount() int {
	fake.resultPerTargetMutex.RLock()
	defer fake.resultPerTargetMutex.RUnlock()
	return len(fake.resultPerTargetArgsForCall)
}

func (fake *FakeResultStrategy) ResultPerTargetCalls(stub func() []*powercommit.ResultPerTarget) {
	fake.resultPerTargetMutex.Lock()
	defer fake.resultPerTargetMutex.Unlock()
	fake.ResultPerTargetStub = stub
}

func (fake *FakeResultStrategy) ResultPerTargetReturns(result1 []*powercommit.ResultPerTarget) {
	fake.resultPerTargetMutex.Lock()
	defer fake.resultPerTargetMutex.Unlock()
	fake.ResultPerTargetStub = nil
	fake.resultPerTargetReturns = struct {
		result1 []*powercommit.ResultPerTarget
	}{result1}
}

func (fake *FakeResultStrategy) ResultPerTargetReturnsOnCall(i int, result1 []*powercommit.ResultPerTarget) {
	fake.resultPerTargetMutex.Lock()
	defer fake.resultPerTargetMutex.Unlock()
	fake.ResultPerTargetStub = nil
	if fake.resultPerTargetReturnsOnCall == nil {
		fake.resultPerTargetReturnsOnCall = make(map[int]struct {
			result1 []*powercommit.ResultPerTarget
		})
	}
	fake.resultPerTargetReturnsOnCall[i] = struct {
		result1 []*powercommit.ResultPerTarget
	}{result1}
}

func (fake *FakeResultStrategy) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.commitMutex.RLock()
	defer fake.commitMutex.RUnlock()
	fake.dieRollerMutex.RLock()
	defer fake.dieRollerMutex.RUnlock()
	fake.forecastMutex.RLock()
	defer fake.forecastMutex.RUnlock()
	fake.resultPerTargetMutex.RLock()
	defer fake.resultPerTargetMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeResultStrategy) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ powercommit.ResultStrategy = new(FakeResultStrategy)
